{"changed":true,"filter":false,"title":"lambda2.py","tooltip":"/lambda2.py","value":"import boto3\nimport csv\nfrom bs4 import BeautifulSoup\nimport requests\nfrom datetime import datetime\n\ndef lambda_handler(event, context):\n    # Obtener la URL del archivo desde el evento\n    file_url = event['file_url']\n    \n    # Descargar el archivo\n    response = requests.get(file_url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    \n    # Procesar los datos con Beautifulsoup\n    # Supongamos que aquí se extraen los datos necesarios\n    \n    # Datos de ejemplo\n    price = \"$100,000\"\n    area = \"200 sqft\"\n    rooms = \"3\"\n    additional_features = \"Garden, Pool\"\n    \n    # Crear un archivo CSV con los datos procesados\n    csv_data = [\n        ['price', 'area', 'rooms', 'additional_features'],\n        [price, area, rooms, additional_features]\n    ]\n    \n    # Crear el nombre del archivo\n    now = datetime.now()\n    year = now.year\n    month = now.month\n    day = now.day\n    file_name = f\"{year}-{month:02d}-{day:02d}.csv\"\n    \n    # Guardar el archivo CSV en S3\n    s3 = boto3.client('s3')\n    bucket_name = 'bucket-parcial2'\n    key = f\"casas/year={year}/month={month}/day={day}/{file_name}\"\n    s3.put_object(Body=csv_data, Bucket=bucket_name, Key=key)\n    \n    return {\n        'statusCode': 200,\n        'body': 'Procesamiento completado'\n    }\n","undoManager":{"mark":4,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"remove","lines":["a","",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["import boto3","import csv","from bs4 import BeautifulSoup","import requests","from datetime import datetime","","def lambda_handler(event, context):","    # Obtener la URL del archivo desde el evento","    file_url = event['file_url']","    ","    # Descargar el archivo","    response = requests.get(file_url)","    soup = BeautifulSoup(response.text, 'html.parser')","    ","    # Procesar los datos con Beautifulsoup","    # Supongamos que aquí se extraen los datos necesarios","    ","    # Datos de ejemplo","    price = \"$100,000\"","    area = \"200 sqft\"","    rooms = \"3\"","    additional_features = \"Garden, Pool\"","    ","    # Crear un archivo CSV con los datos procesados","    csv_data = [","        ['price', 'area', 'rooms', 'additional_features'],","        [price, area, rooms, additional_features]","    ]","    ","    # Crear el nombre del archivo","    now = datetime.now()","    year = now.year","    month = now.month","    day = now.day","    file_name = f\"{year}-{month:02d}-{day:02d}.csv\"","    ","    # Guardar el archivo CSV en S3","    s3 = boto3.client('s3')","    bucket_name = 'bucket-final'","    key = f\"casas/year={year}/month={month}/day={day}/{file_name}\"","    s3.put_object(Body=csv_data, Bucket=bucket_name, Key=key)","    ","    return {","        'statusCode': 200,","        'body': 'Procesamiento completado'","    }",""]}],[{"start":{"row":38,"column":30},"end":{"row":38,"column":31},"action":"remove","lines":["l"],"id":3},{"start":{"row":38,"column":29},"end":{"row":38,"column":30},"action":"remove","lines":["a"]},{"start":{"row":38,"column":28},"end":{"row":38,"column":29},"action":"remove","lines":["n"]},{"start":{"row":38,"column":27},"end":{"row":38,"column":28},"action":"remove","lines":["i"]},{"start":{"row":38,"column":26},"end":{"row":38,"column":27},"action":"remove","lines":["f"]}],[{"start":{"row":38,"column":26},"end":{"row":38,"column":27},"action":"insert","lines":["p"],"id":4},{"start":{"row":38,"column":27},"end":{"row":38,"column":28},"action":"insert","lines":["a"]},{"start":{"row":38,"column":28},"end":{"row":38,"column":29},"action":"insert","lines":["r"]},{"start":{"row":38,"column":29},"end":{"row":38,"column":30},"action":"insert","lines":["c"]},{"start":{"row":38,"column":30},"end":{"row":38,"column":31},"action":"insert","lines":["i"]},{"start":{"row":38,"column":31},"end":{"row":38,"column":32},"action":"insert","lines":["a"]},{"start":{"row":38,"column":32},"end":{"row":38,"column":33},"action":"insert","lines":["l"]},{"start":{"row":38,"column":33},"end":{"row":38,"column":34},"action":"insert","lines":["2"]}],[{"start":{"row":0,"column":0},"end":{"row":38,"column":14},"action":"insert","lines":["Oh no! An error occurred! :(","","==============","","Traceback (most recent call last):","  File \"/home/ubuntu/.local/lib/python3.10/site-packages/zappa/core.py\", line 1020, in upload_to_s3","    self.s3_client.head_bucket(Bucket=bucket_name)","  File \"/home/ubuntu/.local/lib/python3.10/site-packages/botocore/client.py\", line 553, in _api_call","    return self._make_api_call(operation_name, kwargs)","  File \"/home/ubuntu/.local/lib/python3.10/site-packages/botocore/client.py\", line 1009, in _make_api_call","    raise error_class(parsed_response, operation_name)","botocore.exceptions.ClientError: An error occurred (403) when calling the HeadBucket operation: Forbidden","","During handling of the above exception, another exception occurred:","","Traceback (most recent call last):","  File \"/home/ubuntu/.local/lib/python3.10/site-packages/zappa/cli.py\", line 3046, in handle","    sys.exit(cli.handle())","  File \"/home/ubuntu/.local/lib/python3.10/site-packages/zappa/cli.py\", line 520, in handle","    self.dispatch_command(self.command, stage)","  File \"/home/ubuntu/.local/lib/python3.10/site-packages/zappa/cli.py\", line 562, in dispatch_command","    self.deploy(self.vargs[\"zip\"], self.vargs[\"docker_image_uri\"])","  File \"/home/ubuntu/.local/lib/python3.10/site-packages/zappa/cli.py\", line 768, in deploy","    success = self.zappa.upload_to_s3(","  File \"/home/ubuntu/.local/lib/python3.10/site-packages/zappa/core.py\", line 1026, in upload_to_s3","    self.s3_client.create_bucket(","  File \"/home/ubuntu/.local/lib/python3.10/site-packages/botocore/client.py\", line 553, in _api_call","    return self._make_api_call(operation_name, kwargs)","  File \"/home/ubuntu/.local/lib/python3.10/site-packages/botocore/client.py\", line 1009, in _make_api_call","    raise error_class(parsed_response, operation_name)","botocore.errorfactory.BucketAlreadyExists: An error occurred (BucketAlreadyExists) when calling the CreateBucket operation: The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again.","","==============","","Need help? Found a bug? Let us know! :D","File bug reports on GitHub here: https://github.com/Zappa/Zappa","And join our Slack channel here: https://zappateam.slack.com","Love!,"," ~ Team Zappa!"],"id":6}],[{"start":{"row":0,"column":0},"end":{"row":46,"column":0},"action":"remove","lines":["import boto3","import csv","from bs4 import BeautifulSoup","import requests","from datetime import datetime","","def lambda_handler(event, context):","    # Obtener la URL del archivo desde el evento","    file_url = event['file_url']","    ","    # Descargar el archivo","    response = requests.get(file_url)","    soup = BeautifulSoup(response.text, 'html.parser')","    ","    # Procesar los datos con Beautifulsoup","    # Supongamos que aquí se extraen los datos necesarios","    ","    # Datos de ejemplo","    price = \"$100,000\"","    area = \"200 sqft\"","    rooms = \"3\"","    additional_features = \"Garden, Pool\"","    ","    # Crear un archivo CSV con los datos procesados","    csv_data = [","        ['price', 'area', 'rooms', 'additional_features'],","        [price, area, rooms, additional_features]","    ]","    ","    # Crear el nombre del archivo","    now = datetime.now()","    year = now.year","    month = now.month","    day = now.day","    file_name = f\"{year}-{month:02d}-{day:02d}.csv\"","    ","    # Guardar el archivo CSV en S3","    s3 = boto3.client('s3')","    bucket_name = 'bucket-parcial2'","    key = f\"casas/year={year}/month={month}/day={day}/{file_name}\"","    s3.put_object(Body=csv_data, Bucket=bucket_name, Key=key)","    ","    return {","        'statusCode': 200,","        'body': 'Procesamiento completado'","    }",""],"id":5}]]},"ace":{"folds":[],"scrolltop":329,"scrollleft":0,"selection":{"start":{"row":46,"column":0},"end":{"row":46,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":11,"state":"start","mode":"ace/mode/python"}},"timestamp":1711038825347}